import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ArtWorksNft extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620034e7380380620034e78339810160408190526200003491620002b5565b8181620000486301ffc9a760e01b6200010f565b81516200005d9060069060208501906200016e565b508051620000739060079060208401906200016e565b50620000866380ac58cd60e01b6200010f565b62000098635b5e139f60e01b6200010f565b620000aa63780e9d6360e01b6200010f565b5060009050620000b96200016a565b600a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350505062000353565b6001600160e01b03198082161415620001455760405162461bcd60e51b81526004016200013c906200031c565b60405180910390fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001a65760008555620001f1565b82601f10620001c157805160ff1916838001178555620001f1565b82800160010185558215620001f1579182015b82811115620001f1578251825591602001919060010190620001d4565b50620001ff92915062000203565b5090565b5b80821115620001ff576000815560010162000204565b600082601f8301126200022b578081fd5b81516001600160401b03808211156200024057fe5b6040516020601f8401601f19168201810183811183821017156200026057fe5b604052838252858401810187101562000277578485fd5b8492505b838310156200029a57858301810151828401820152918201916200027b565b83831115620002ab57848185840101525b5095945050505050565b60008060408385031215620002c8578182fd5b82516001600160401b0380821115620002df578384fd5b620002ed868387016200021a565b9350602085015191508082111562000303578283fd5b5062000312858286016200021a565b9150509250929050565b6020808252601c908201527f4552433136353a20696e76616c696420696e7465726661636520696400000000604082015260600190565b61318480620003636000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80636c0360eb116100c3578063b88d4fde1161007c578063b88d4fde146102bd578063c87b56dd146102d0578063e3272762146102e3578063e985e9c514610303578063f2fde38b14610316578063f54e9d771461032957610158565b80636c0360eb1461027757806370a082311461027f578063715018a6146102925780638da5cb5b1461029a57806395d89b41146102a2578063a22cb465146102aa57610158565b806323b872dd1161011557806323b872dd146102055780632f745c591461021857806342842e0e1461022b5780634ccbad7a1461023e5780634f6ccce7146102515780636352211e1461026457610158565b806301ffc9a71461015d57806304d9794d1461018657806306fdde03146101a6578063081812fc146101bb578063095ea7b3146101db57806318160ddd146101f0575b600080fd5b61017061016b366004612765565b61033c565b60405161017d9190612989565b60405180910390f35b610199610194366004612882565b61035f565b60405161017d9190612ef8565b6101ae610a99565b60405161017d9190612994565b6101ce6101c9366004612882565b610b2f565b60405161017d9190612938565b6101ee6101e936600461273c565b610b7b565b005b6101f8610c13565b60405161017d9190613081565b6101ee61021336600461265f565b610c24565b6101f861022636600461273c565b610c5c565b6101ee61023936600461265f565b610c87565b6101ee61024c366004612807565b610ca2565b6101f861025f366004612882565b610ef6565b6101ce610272366004612882565b610f0c565b6101ae610f34565b6101f861028d366004612613565b610f95565b6101ee610fde565b6101ce611067565b6101ae611076565b6101ee6102b8366004612713565b6110d7565b6101ee6102cb36600461269a565b6111a5565b6101ae6102de366004612882565b6111e4565b6102f66102f136600461289a565b611328565b60405161017d9190612eb6565b61017061031136600461262d565b611488565b6101ee610324366004612613565b6114b6565b6101ee61033736600461279d565b611577565b6001600160e01b0319811660009081526020819052604090205460ff165b919050565b610367612126565b6000828152600b602090815260408083208151815460026001821615610100026000190190911604601f810185900490940281016101e090810184526101c082018581529194929385939084019285928492849187018282801561040c5780601f106103e15761010080835404028352916020019161040c565b820191906000526020600020905b8154815290600101906020018083116103ef57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ae5780601f10610483576101008083540402835291602001916104ae565b820191906000526020600020905b81548152906001019060200180831161049157829003601f168201915b5050509183525050600282810180546040805160206001841615610100026000190190931694909404601f810183900483028501830190915280845293810193908301828280156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b505050918352505060038201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156105d45780601f106105a9576101008083540402835291602001916105d4565b820191906000526020600020905b8154815290600101906020018083116105b757829003601f168201915b505050918352505060048201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106685780601f1061063d57610100808354040283529160200191610668565b820191906000526020600020905b81548152906001019060200180831161064b57829003601f168201915b505050918352505060058201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156106fc5780601f106106d1576101008083540402835291602001916106fc565b820191906000526020600020905b8154815290600101906020018083116106df57829003601f168201915b505050918352505060068201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156107905780601f1061076557610100808354040283529160200191610790565b820191906000526020600020905b81548152906001019060200180831161077357829003601f168201915b505050918352505060078201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156108245780601f106107f957610100808354040283529160200191610824565b820191906000526020600020905b81548152906001019060200180831161080757829003601f168201915b505050918352505060088201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156108b85780601f1061088d576101008083540402835291602001916108b8565b820191906000526020600020905b81548152906001019060200180831161089b57829003601f168201915b505050918352505060098201805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815293820193929183018282801561094c5780601f106109215761010080835404028352916020019161094c565b820191906000526020600020905b81548152906001019060200180831161092f57829003601f168201915b5050509183525050600a8201805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529382019392918301828280156109e05780601f106109b5576101008083540402835291602001916109e0565b820191906000526020600020905b8154815290600101906020018083116109c357829003601f168201915b5050509183525050600b8201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b505050919092525050508152600c919091015460ff1615156020909101529392505050565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b255780601f10610afa57610100808354040283529160200191610b25565b820191906000526020600020905b815481529060010190602001808311610b0857829003601f168201915b5050505050905090565b6000610b3a826117be565b610b5f5760405162461bcd60e51b8152600401610b5690612cd4565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610b8682610f0c565b9050806001600160a01b0316836001600160a01b03161415610bba5760405162461bcd60e51b8152600401610b5690612ded565b806001600160a01b0316610bcc6117cb565b6001600160a01b03161480610be85750610be8816103116117cb565b610c045760405162461bcd60e51b8152600401610b5690612bb6565b610c0e83836117cf565b505050565b6000610c1f600261183d565b905090565b610c35610c2f6117cb565b82611848565b610c515760405162461bcd60e51b8152600401610b5690612e2e565b610c0e8383836118cd565b6001600160a01b0382166000908152600160205260408120610c7e90836119db565b90505b92915050565b610c0e838383604051806020016040528060008152506111a5565b610caa6117cb565b6001600160a01b0316610cbb611067565b6001600160a01b031614610ce15760405162461bcd60e51b8152600401610b5690612d20565b610cf46001610cee610c13565b906119e7565b50610cff8183611a0c565b6000828152600b6020908152604090912085518051805188948492610d2a9284929190910190612146565b506020828101518051610d439260018501920190612146565b5060408201518051610d5f916002840191602090910190612146565b5060608201518051610d7b916003840191602090910190612146565b5060808201518051610d97916004840191602090910190612146565b5060a08201518051610db3916005840191602090910190612146565b5060c08201518051610dcf916006840191602090910190612146565b5060e08201518051610deb916007840191602090910190612146565b506101008201518051610e08916008840191602090910190612146565b506101208201518051610e25916009840191602090910190612146565b506101408201518051610e4291600a840191602090910190612146565b506101608201518051610e5f91600b840191602090910190612146565b50505060209190910151600c909101805460ff191691151591909117905560005b8351811015610eef57838181518110610e9557fe5b6020908102919091018101516000858152600c83526040808220858352845290208151805192939192610ecb9284920190612146565b506020828101518051610ee49260018501920190612146565b505050600101610e80565b5050505050565b600080610f04600284611a2a565b509392505050565b6000610c81826040518060600160405280602981526020016131266029913960029190611a46565b60098054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b255780601f10610afa57610100808354040283529160200191610b25565b60006001600160a01b038216610fbd5760405162461bcd60e51b8152600401610b5690612c13565b6001600160a01b0382166000908152600160205260409020610c819061183d565b610fe66117cb565b6001600160a01b0316610ff7611067565b6001600160a01b03161461101d5760405162461bcd60e51b8152600401610b5690612d20565b600a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600a80546001600160a01b0319169055565b600a546001600160a01b031690565b60078054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610b255780601f10610afa57610100808354040283529160200191610b25565b6110df6117cb565b6001600160a01b0316826001600160a01b031614156111105760405162461bcd60e51b8152600401610b5690612b33565b806005600061111d6117cb565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff1916921515929092179091556111616117cb565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111999190612989565b60405180910390a35050565b6111b66111b06117cb565b83611848565b6111d25760405162461bcd60e51b8152600401610b5690612e2e565b6111de84848484611a5d565b50505050565b60606111ef826117be565b61120b5760405162461bcd60e51b8152600401610b5690612d9e565b60008281526008602090815260408083208054825160026001831615610100026000190190921691909104601f81018590048502820185019093528281529290919083018282801561129e5780601f106112735761010080835404028352916020019161129e565b820191906000526020600020905b81548152906001019060200180831161128157829003601f168201915b5050505050905060006112af610f34565b90508051600014156112c35750905061035a565b8151156112f55780826040516020016112dd929190612909565b6040516020818303038152906040529250505061035a565b806112ff85611a90565b604051602001611310929190612909565b60405160208183030381529060405292505050919050565b6113306121d2565b6000838152600c60209081526040808320858452808352928190208151815460026001821615610100026000190190911604601f810185900490940281016060908101845292810184815290939192849284918401828280156113d45780601f106113a9576101008083540402835291602001916113d4565b820191906000526020600020905b8154815290600101906020018083116113b757829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114765780601f1061144b57610100808354040283529160200191611476565b820191906000526020600020905b81548152906001019060200180831161145957829003601f168201915b50505050508152505091505092915050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6114be6117cb565b6001600160a01b03166114cf611067565b6001600160a01b0316146114f55760405162461bcd60e51b8152600401610b5690612d20565b6001600160a01b03811661151b5760405162461bcd60e51b8152600401610b5690612a3b565b600a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600a80546001600160a01b0319166001600160a01b0392909216919091179055565b61157f6117cb565b6001600160a01b0316611590611067565b6001600160a01b0316146115b65760405162461bcd60e51b8152600401610b5690612d20565b6115c36001610cee610c13565b506115ce3382611a0c565b6000818152600b60209081526040909120845180518051879484926115f99284929190910190612146565b5060208281015180516116129260018501920190612146565b506040820151805161162e916002840191602090910190612146565b506060820151805161164a916003840191602090910190612146565b5060808201518051611666916004840191602090910190612146565b5060a08201518051611682916005840191602090910190612146565b5060c0820151805161169e916006840191602090910190612146565b5060e082015180516116ba916007840191602090910190612146565b5061010082015180516116d7916008840191602090910190612146565b5061012082015180516116f4916009840191602090910190612146565b50610140820151805161171191600a840191602090910190612146565b50610160820151805161172e91600b840191602090910190612146565b50505060209190910151600c909101805460ff191691151591909117905560005b82518110156111de5782818151811061176457fe5b6020908102919091018101516000848152600c8352604080822085835284529020815180519293919261179a9284920190612146565b5060208281015180516117b39260018501920190612146565b50505060010161174f565b6000610c81600283611b6b565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061180482610f0c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c8182611b77565b6000611853826117be565b61186f5760405162461bcd60e51b8152600401610b5690612b6a565b600061187a83610f0c565b9050806001600160a01b0316846001600160a01b031614806118b55750836001600160a01b03166118aa84610b2f565b6001600160a01b0316145b806118c557506118c58185611488565b949350505050565b826001600160a01b03166118e082610f0c565b6001600160a01b0316146119065760405162461bcd60e51b8152600401610b5690612d55565b6001600160a01b03821661192c5760405162461bcd60e51b8152600401610b5690612aef565b611937838383610c0e565b6119426000826117cf565b6001600160a01b03831660009081526001602052604090206119649082611b7b565b506001600160a01b03821660009081526001602052604090206119879082611b87565b5061199460028284611b93565b5080826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000610c7e8383611ba9565b600082820183811015610c7e5760405162461bcd60e51b8152600401610b5690612ab8565b611a26828260405180602001604052806000815250611bee565b5050565b6000808080611a398686611c21565b9097909650945050505050565b6000611a53848484611c7d565b90505b9392505050565b611a688484846118cd565b611a7484848484611cdc565b6111de5760405162461bcd60e51b8152600401610b56906129e9565b606081611ab557506040805180820190915260018152600360fc1b602082015261035a565b8160005b8115611acd57600101600a82049150611ab9565b60008167ffffffffffffffff81118015611ae657600080fd5b506040519080825280601f01601f191660200182016040528015611b11576020820181803683370190505b50859350905060001982015b8315611b6257600a840660300160f81b82828060019003935081518110611b4057fe5b60200101906001600160f81b031916908160001a905350600a84049350611b1d565b50949350505050565b6000610c7e8383611dbb565b5490565b6000610c7e8383611dd3565b6000610c7e8383611e99565b6000611a5384846001600160a01b038516611ee3565b81546000908210611bcc5760405162461bcd60e51b8152600401610b56906129a7565b826000018281548110611bdb57fe5b9060005260206000200154905092915050565b611bf88383611f7a565b611c056000848484611cdc565b610c0e5760405162461bcd60e51b8152600401610b56906129e9565b815460009081908310611c465760405162461bcd60e51b8152600401610b5690612c5d565b6000846000018481548110611c5757fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281611cad5760405162461bcd60e51b8152600401610b569190612994565b50846000016001820381548110611cc057fe5b9060005260206000209060020201600101549150509392505050565b6000611cf0846001600160a01b031661203e565b611cfc575060016118c5565b6000611d84630a85bd0160e11b611d116117cb565b888787604051602401611d27949392919061294c565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518060600160405280603281526020016130f4603291396001600160a01b0388169190612044565b9050600081806020019051810190611d9c9190612781565b6001600160e01b031916630a85bd0160e11b1492505050949350505050565b60009081526001919091016020526040902054151590565b60008181526001830160205260408120548015611e8f5783546000198083019190810190600090879083908110611e0657fe5b9060005260206000200154905080876000018481548110611e2357fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611e5357fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610c81565b6000915050610c81565b6000611ea58383611dbb565b611edb57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c81565b506000610c81565b600082815260018401602052604081205480611f48575050604080518082018252838152602080820184815286546001818101895560008981528481209551600290930290950191825591519082015586548684528188019092529290912055611a56565b82856000016001830381548110611f5b57fe5b9060005260206000209060020201600101819055506000915050611a56565b6001600160a01b038216611fa05760405162461bcd60e51b8152600401610b5690612c9f565b611fa9816117be565b15611fc65760405162461bcd60e51b8152600401610b5690612a81565b611fd260008383610c0e565b6001600160a01b0382166000908152600160205260409020611ff49082611b87565b5061200160028284611b93565b5060405181906001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b3b151590565b6060611a538484600085856120588561203e565b6120745760405162461bcd60e51b8152600401610b5690612e7f565b600080866001600160a01b0316858760405161209091906128ed565b60006040518083038185875af1925050503d80600081146120cd576040519150601f19603f3d011682016040523d82523d6000602084013e6120d2565b606091505b50915091506120e28282866120ed565b979650505050505050565b606083156120fc575081611a56565b82511561210c5782518084602001fd5b8160405162461bcd60e51b8152600401610b569190612994565b60405180604001604052806121396121ec565b8152600060209091015290565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261217c57600085556121c2565b82601f1061219557805160ff19168380011785556121c2565b828001600101855582156121c2579182015b828111156121c25782518255916020019190600101906121a7565b506121ce92915061224d565b5090565b604051806040016040528060608152602001606081525090565b6040518061018001604052806060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b5b808211156121ce576000815560010161224e565b600067ffffffffffffffff83111561227657fe5b612289601f8401601f191660200161308a565b905082815283838301111561229d57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461035a57600080fd5b600082601f8301126122db578081fd5b8135602067ffffffffffffffff808311156122f257fe5b6122ff828385020161308a565b83815282810190868401865b868110156123985781358901604080601f19838e0301121561232b57898afd5b8051818101818110898211171561233e57fe5b82528289013588811115612350578b8cfd5b61235e8e8b838701016123b6565b825250908201359087821115612372578a8bfd5b6123808d8a848601016123b6565b818a015286525050928501929085019060010161230b565b509098975050505050505050565b8035801515811461035a57600080fd5b600082601f8301126123c6578081fd5b610c7e83833560208501612262565b600060408083850312156123e7578182fd5b805181810167ffffffffffffffff828210818311171561240357fe5b818452829450853591508082111561241a57600080fd5b818601915061018080838903121561243157600080fd5b61243a8161308a565b905082358281111561244b57600080fd5b612457898286016123b6565b82525060208301358281111561246c57600080fd5b612478898286016123b6565b602083015250848301358281111561248f57600080fd5b61249b898286016123b6565b868301525060608301359450818511156124b457600080fd5b6124c0888685016123b6565b606082015260808301359450818511156124d957600080fd5b6124e5888685016123b6565b608082015260a08301359450818511156124fe57600080fd5b61250a888685016123b6565b60a082015260c083013594508185111561252357600080fd5b61252f888685016123b6565b60c082015260e083013594508185111561254857600080fd5b612554888685016123b6565b60e08201526101009450848301358281111561256f57600080fd5b61257b898286016123b6565b86830152506101209450848301358281111561259657600080fd5b6125a2898286016123b6565b8683015250610140945084830135828111156125bd57600080fd5b6125c9898286016123b6565b8683015250610160945084830135828111156125e457600080fd5b6125f0898286016123b6565b82870152508352506126069050602085016123a6565b6020820152505092915050565b600060208284031215612624578081fd5b610c7e826122b4565b6000806040838503121561263f578081fd5b612648836122b4565b9150612656602084016122b4565b90509250929050565b600080600060608486031215612673578081fd5b61267c846122b4565b925061268a602085016122b4565b9150604084013590509250925092565b600080600080608085870312156126af578081fd5b6126b8856122b4565b93506126c6602086016122b4565b925060408501359150606085013567ffffffffffffffff8111156126e8578182fd5b8501601f810187136126f8578182fd5b61270787823560208401612262565b91505092959194509250565b60008060408385031215612725578182fd5b61272e836122b4565b9150612656602084016123a6565b6000806040838503121561274e578182fd5b612757836122b4565b946020939093013593505050565b600060208284031215612776578081fd5b8135610c7e816130da565b600060208284031215612792578081fd5b8151610c7e816130da565b6000806000606084860312156127b1578081fd5b833567ffffffffffffffff808211156127c8578283fd5b6127d4878388016123d5565b945060208601359150808211156127e9578283fd5b506127f6868287016122cb565b925050604084013590509250925092565b6000806000806080858703121561281c578182fd5b843567ffffffffffffffff80821115612833578384fd5b61283f888389016123d5565b95506020870135915080821115612854578384fd5b50612861878288016122cb565b93505060408501359150612877606086016122b4565b905092959194509250565b600060208284031215612893578081fd5b5035919050565b600080604083850312156128ac578182fd5b50508035926020909101359150565b15159052565b600081518084526128d98160208601602086016130ae565b601f01601f19169290920160200192915050565b600082516128ff8184602087016130ae565b9190910192915050565b6000835161291b8184602088016130ae565b83519083019061292f8183602088016130ae565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061297f908301846128c1565b9695505050505050565b901515815260200190565b600060208252610c7e60208301846128c1565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b600060208252825160406020840152612ed260608401826128c1565b90506020840151601f19848303016040850152612eef82826128c1565b95945050505050565b6000602082528251604060208401528051610180806060860152612f206101e08601836128c1565b91506020830151605f1980878503016080880152612f3e84836128c1565b935060408501519150808785030160a0880152612f5b84836128c1565b935060608501519150808785030160c0880152612f7884836128c1565b935060808501519150808785030160e0880152612f9584836128c1565b935060a08501519150610100818886030181890152612fb485846128c1565b945060c086015192506101208289870301818a0152612fd386856128c1565b955060e08701519350610140838a880301818b0152612ff287866128c1565b96508288015194506101609250838a880301838b015261301287866128c1565b9650818801519450838a880301868b015261302d87866128c1565b9650808801519550505081888603016101a089015261304c85856128c1565b9501518786039091016101c088015293925061306c9150829050836128c1565b9150506020840151610f0460408501826128bb565b90815260200190565b60405181810167ffffffffffffffff811182821017156130a657fe5b604052919050565b60005b838110156130c95781810151838201526020016130b1565b838111156111de5750506000910152565b6001600160e01b0319811681146130f057600080fd5b5056fe4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656ea264697066735822122083dc410d37ed983442795cb1f1d34f1642661d10cb3183c2bb7b374f396a58e864736f6c63430007060033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURI = "baseURI";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETARTWORKBYTOKENID = "getArtWorkByTokenId";

    public static final String FUNC_GETARTWORKIMAGESBYTOKENIDANDINDEX = "getArtWorkImagesByTokenIdAndIndex";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTARTWORKSTOKEN = "mintArtWorksToken";

    public static final String FUNC_MINTARTWORKSTOKEN2OWNER = "mintArtWorksToken2Owner";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected ArtWorksNft(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ArtWorksNft(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ArtWorksNft(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ArtWorksNft(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseURI() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASEURI,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<artWork> getArtWorkByTokenId(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETARTWORKBYTOKENID,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<artWork>() {}));
        return executeRemoteCallSingleValueReturn(function, artWork.class);
    }

    public RemoteFunctionCall<artWorkImage> getArtWorkImagesByTokenIdAndIndex(BigInteger tokenId, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETARTWORKIMAGESBYTOKENIDANDINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<artWorkImage>() {}));
        return executeRemoteCallSingleValueReturn(function, artWorkImage.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                        new org.web3j.abi.datatypes.Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintArtWorksToken(artWork aw, List<artWorkImage> awImages, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTARTWORKSTOKEN,
                Arrays.<Type>asList(aw,
                        new org.web3j.abi.datatypes.DynamicArray<artWorkImage>(artWorkImage.class, awImages),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintArtWorksToken2Owner(artWork aw, List<artWorkImage> awImages, BigInteger tokenId, String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTARTWORKSTOKEN2OWNER,
                Arrays.<Type>asList(aw,
                        new org.web3j.abi.datatypes.DynamicArray<artWorkImage>(artWorkImage.class, awImages),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.Address(160, owner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId),
                        new org.web3j.abi.datatypes.DynamicBytes(_data)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator),
                        new org.web3j.abi.datatypes.Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENOFOWNERBYINDEX,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner),
                        new org.web3j.abi.datatypes.generated.Uint256(index)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from),
                        new org.web3j.abi.datatypes.Address(160, to),
                        new org.web3j.abi.datatypes.generated.Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ArtWorksNft load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ArtWorksNft(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ArtWorksNft load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ArtWorksNft(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ArtWorksNft load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ArtWorksNft(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ArtWorksNft load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ArtWorksNft(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ArtWorksNft> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(ArtWorksNft.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ArtWorksNft> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(ArtWorksNft.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ArtWorksNft> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(ArtWorksNft.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ArtWorksNft> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name),
                new org.web3j.abi.datatypes.Utf8String(symbol)));
        return deployRemoteCall(ArtWorksNft.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class artWorkBasicInfo extends DynamicStruct {
        public String name;

        public String number;

        public String author;

        public String createdEra;

        public String createdTime;

        public String style;

        public String length;

        public String width;

        public String height;

        public String caliber;

        public String capacity;

        public String weight;

        public artWorkBasicInfo(String name, String number, String author, String createdEra, String createdTime, String style, String length, String width, String height, String caliber, String capacity, String weight) {
            super(new org.web3j.abi.datatypes.Utf8String(name),new org.web3j.abi.datatypes.Utf8String(number),new org.web3j.abi.datatypes.Utf8String(author),new org.web3j.abi.datatypes.Utf8String(createdEra),new org.web3j.abi.datatypes.Utf8String(createdTime),new org.web3j.abi.datatypes.Utf8String(style),new org.web3j.abi.datatypes.Utf8String(length),new org.web3j.abi.datatypes.Utf8String(width),new org.web3j.abi.datatypes.Utf8String(height),new org.web3j.abi.datatypes.Utf8String(caliber),new org.web3j.abi.datatypes.Utf8String(capacity),new org.web3j.abi.datatypes.Utf8String(weight));
            this.name = name;
            this.number = number;
            this.author = author;
            this.createdEra = createdEra;
            this.createdTime = createdTime;
            this.style = style;
            this.length = length;
            this.width = width;
            this.height = height;
            this.caliber = caliber;
            this.capacity = capacity;
            this.weight = weight;
        }

        public artWorkBasicInfo(Utf8String name, Utf8String number, Utf8String author, Utf8String createdEra, Utf8String createdTime, Utf8String style, Utf8String length, Utf8String width, Utf8String height, Utf8String caliber, Utf8String capacity, Utf8String weight) {
            super(name,number,author,createdEra,createdTime,style,length,width,height,caliber,capacity,weight);
            this.name = name.getValue();
            this.number = number.getValue();
            this.author = author.getValue();
            this.createdEra = createdEra.getValue();
            this.createdTime = createdTime.getValue();
            this.style = style.getValue();
            this.length = length.getValue();
            this.width = width.getValue();
            this.height = height.getValue();
            this.caliber = caliber.getValue();
            this.capacity = capacity.getValue();
            this.weight = weight.getValue();
        }
    }

    public static class artWorkImage extends DynamicStruct {
        public String imageUrl;

        public String hash;

        public artWorkImage(String imageUrl, String hash) {
            super(new org.web3j.abi.datatypes.Utf8String(imageUrl),new org.web3j.abi.datatypes.Utf8String(hash));
            this.imageUrl = imageUrl;
            this.hash = hash;
        }

        public artWorkImage(Utf8String imageUrl, Utf8String hash) {
            super(imageUrl,hash);
            this.imageUrl = imageUrl.getValue();
            this.hash = hash.getValue();
        }
    }

    public static class artWork extends DynamicStruct {
        public artWorkBasicInfo awbi;

        public Boolean isDeposited;

        public artWork(artWorkBasicInfo awbi, Boolean isDeposited) {
            super(awbi,new org.web3j.abi.datatypes.Bool(isDeposited));
            this.awbi = awbi;
            this.isDeposited = isDeposited;
        }

        public artWork(artWorkBasicInfo awbi, Bool isDeposited) {
            super(awbi,isDeposited);
            this.awbi = awbi;
            this.isDeposited = isDeposited.getValue();
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
